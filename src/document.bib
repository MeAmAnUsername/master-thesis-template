% Manual citations here
@Inbook{Moodie2006,
title="Introducing Ant",
bookTitle="Pro Apache Ant",
year="2006",
publisher="Apress",
address="Berkeley, CA",
pages="1--9",
abstract="This chapter provided a quick introduction to building software projects, automating the build process, using build tools, using make, and using Ant. It is simply a taster for the rest of the book, where you will see the practicalities of using Ant.",
isbn="978-1-4302-0092-5",
doi="10.1007/978-1-4302-0092-5_1",
url="https://doi.org/10.1007/978-1-4302-0092-5_1"
}

@article{Hatch2018,
author = {Hatch, William Gallard and Flatt, Matthew},
title = {Rash: From Reckless Interactions to Reliable Programs},
year = {2018},
issue_date = {September 2018},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {53},
number = {9},
issn = {0362-1340},
url = {https://doi.org/10.1145/3393934.3278129},
doi = {10.1145/3393934.3278129},
abstract = {Command languages like the Bourne Shell provide a terse syntax for exploratory programming and system interaction. Shell users can begin to write programs that automate their tasks by simply copying their interactions verbatim into a script file. However, command languages usually scale poorly beyond small scripts, and they can be difficult to integrate into larger programs. General-purpose languages scale well, but are verbose and unwieldy for common interactive actions such as process composition.  We present Rash, a domain-specific command language embedded in Racket. Rash provides a terse and extensible syntax for interactive system administration and scripting, as well as easy composition of both Racket functions and operating system processes. Rash and normal Racket code can be nested together at the expression level, providing the benefits of a shell language and a general-purpose language together. Thus, Rash provides a gradual scale between shell-style interactions and general-purpose programming.},
journal = {SIGPLAN Not.},
month = nov,
pages = {28–39},
numpages = {12},
keywords = {macros, Domain specific language, shell}
}

@inproceedings{10.1145/3278122.3278129,
author = {Hatch, William Gallard and Flatt, Matthew},
title = {Rash: From Reckless Interactions to Reliable Programs},
year = {2018},
isbn = {9781450360456},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3278122.3278129},
doi = {10.1145/3278122.3278129},
abstract = {Command languages like the Bourne Shell provide a terse syntax for exploratory programming and system interaction. Shell users can begin to write programs that automate their tasks by simply copying their interactions verbatim into a script file. However, command languages usually scale poorly beyond small scripts, and they can be difficult to integrate into larger programs. General-purpose languages scale well, but are verbose and unwieldy for common interactive actions such as process composition.  We present Rash, a domain-specific command language embedded in Racket. Rash provides a terse and extensible syntax for interactive system administration and scripting, as well as easy composition of both Racket functions and operating system processes. Rash and normal Racket code can be nested together at the expression level, providing the benefits of a shell language and a general-purpose language together. Thus, Rash provides a gradual scale between shell-style interactions and general-purpose programming.},
booktitle = {Proceedings of the 17th ACM SIGPLAN International Conference on Generative Programming: Concepts and Experiences},
pages = {28–39},
numpages = {12},
keywords = {shell, macros, Domain specific language},
location = {Boston, MA, USA},
series = {GPCE 2018}
}

